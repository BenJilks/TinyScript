class Obj
{
	name size
	test {Get,Set}
	
	func Obj(name, size)
	{
		self.name = name
		self.size = size
	}
}

func add(a, b)
	ret a + b

func main()
{
	res = add(5, 2)
	log(res)
}

class <ClassName> = 
{
	[<PropName>: [<Type>, <Get?>, <Set?>], ...],
	[<MethodName>: [[<ArgName>, ...], <Function>]]
}

add:
ALLOC 0
PUSH_ARG 0
PUSH_ARG 1
ADD
RETURN

main:
ALLOC 1
PUSH 5
PUSH 2
CALL add
POP 2
ASSIGN 0
PUSH_LOC 0
CALL log
POP 1
RETURN

bytecode: 
ALLOC <count> - create a new stack frame of size <count>
PUSH_ARG <arg_id> - push an argument at <arg_id> to the stack
PUSH_LOC <loc_id> - push a local at <loc_id> to the stack
PUSH <type> <value> - push a value to the stack
POP <count> - pop <count> number of vars
ASSIGN <loc_id> - set a local at <loc_id> to top of stack
ADD - Add two values at top of stack
RETURN - End stack frame and return top of stack
CALL <address> - Call a function at <address>

